@page "{id:int}"
@model RealTimeChatApp.Pages.ChatModel
@{
    ViewData["Title"] = "Chat";
}
<style>
    .edit-message{
        display: none;
    }
    .chat-img {
        max-height: 200px;
        cursor: pointer;
        border-radius: 4px;
        margin-top: 5px;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 999;
        padding-top: 60px;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.9);
    }

    .modal-content {
        margin: auto;
        display: block;
        max-width: 90%;
        max-height: 90%;
    }

    .chat-audio {
        margin-top: 8px;
        width: 250px;
    }
    .close {
        position: absolute;
        top: 15px;
        right: 35px;
        color: #fff;
        font-size: 40px;
        font-weight: bold;
        cursor: pointer;
    }

    .dropdown-btn {
        background: none;
        border: none;
        font-size: 18px;
        cursor: pointer;
        position: absolute;
        top: 0;
        right: 0;
    }

    .dropdown-menu {
        display: none;
        position: absolute;
        right: 0;
        background-color: #fff;
        border: 1px solid #ccc;
        padding: 5px;
        z-index: 100;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }

        .dropdown-menu button {
            display: block;
            width: 100%;
            background: none;
            border: none;
            padding: 5px;
            text-align: left;
            cursor: pointer;
        }

            .dropdown-menu button:hover {
                background-color: #eee;
            }
                  
</style>
<h2>Chat: @Model.ChatRoom?.Name</h2>
<h4>Users in this chat:</h4>
<ul>
    @foreach (var name in Model.ChatUserNames())
    {
        <li>@name</li>
    }
</ul>
<div>
    @if (Model.Messages != null && Model.Messages.Any())
    {
        <ul id="messageList">
            @foreach (var message in Model.Messages)
            {
                var messageId = message.Id;
                <li class="message-item" style="position: relative;" id="msg-@messageId">
                    <strong>@message.User.UserName</strong> (@message.SentAt?.ToString("g")):<br />
                    <div class="message-text">@message.Content</div>

                    @if (message.ImageData != null)
                    {
                        var base64 = Convert.ToBase64String(message.ImageData);
                        <img src="data:image/png;base64,@base64" class="chat-img" onclick="openImageModal(this)" />
                    }

                    @if (message.VoiceData != null)
                    {
                        var base64Audio = Convert.ToBase64String(message.VoiceData);
                        <audio controls class="chat-audio">
                            <source src="data:audio/webm;base64,@base64Audio" type="audio/webm" />
                            Your browser does not support the audio element.
                        </audio>
                    }
                    <button class="dropdown-btn" onclick="toggleDropdown('@messageId')">⋮</button>

                    <div class="dropdown-menu" id="dropdown-@messageId">
                        <button onclick="editMessage('@messageId')">Edit</button>
                        <button onclick="deleteMessage('@messageId')">Delete</button>
                    </div>
                </li>
            }
        </ul>
    }
    else
    {
        <p>No messages yet...</p>
    }
</div>

<hr />

<form method="post" asp-page-handler="SendMessage" enctype="multipart/form-data" class="send-message" id="sendMessageForm">
    <div>
        <label>Your message:</label><br />
        <textarea asp-for="NewMessage" id="messageInput" rows="3" cols="50"></textarea>
    </div>

    <div>
        <label>Attach image:</label><br />
        <input type="file" name="UploadImage" id="imageInput" />
    </div>

    <div>
        <label>Attach voice message:</label><br />
        <button type="button" id="recordBtn">🎙️ Start Recording</button>
        <span id="recordStatus" style="margin-left: 10px;"></span>
        <input type="file" name="VoiceMessage" id="voiceMessageInput" hidden />
    </div>

    <button type="submit">Send</button>
</form>

<form method="post" asp-page-handler="EditMessage" class="edit-message" id="editMessageForm">
    <input type="hidden" name="MessageId" id="editedMessageId" />
    <div>
        <label>Edited message:</label><br />
        <textarea asp-for="NewMessage" id="editedMessageInput" rows="3" cols="50"></textarea>
    </div>
    <button type="submit">Edit</button>
</form>

<hr />
<h4>Add user to this chat</h4>

<form method="post" asp-page-handler="AddUser">
    <div>
        <label>Username:</label><br />
        <input type="text" name="UsernameToAdd" />
    </div>
    <button type="submit">Add</button>
</form>

<div id="imageModal" class="modal" onclick="closeImageModal()">
    <span class="close">&times;</span>
    <img class="modal-content" id="modalImage">
</div>

@if (!string.IsNullOrEmpty(Model.AddUserResult))
{
    <p>@Model.AddUserResult</p>
}
@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        let mediaRecorder;
        let audioChunks = [];

        const roomId = @Model.ChatRoom.Id;
        const userName = '@Model.CurrentUser.UserName';

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.start().then(() => {
            connection.invoke("JoinRoom", roomId);
        });

        document.getElementById("recordBtn").addEventListener("click", async function () {
            var statusLabel = document.getElementById("recordStatus");
            var button = this;

            if (!mediaRecorder || mediaRecorder.state === "inactive") {
                var stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                mediaRecorder = new MediaRecorder(stream);
                audioChunks = [];

                mediaRecorder.ondataavailable = event => {
                    if (event.data.size > 0) {
                        audioChunks.push(event.data);
                    }
                };

                mediaRecorder.onstop = () => {
                    var audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                    var file = new File([audioBlob], 'voiceMessage.webm', { type: 'audio/webm' });

                    var dataTransfer = new DataTransfer();
                    dataTransfer.items.add(file);
                    document.getElementById("voiceMessageInput").files = dataTransfer.files;

                    statusLabel.textContent = "✅ Voice recorded";
                };

                mediaRecorder.start();
                button.textContent = "⏹️ Stop Recording";
                statusLabel.textContent = "Recording...";
            } else if (mediaRecorder.state === "recording") {
                mediaRecorder.stop();
                button.textContent = "🎙️ Start Recording";
            }
        });

        connection.on("ReceiveMessage", function (user, message, messageId, imageBase64, audioBase64, time) {
            var li = document.createElement("li");
            li.className = "message-item";
            li.style.position = "relative";
            li.id = `msg-${messageId}`;

            li.innerHTML = `
                <strong>${user}</strong> (${time}):<br />
                <div class="message-text">${message}</div>
                <button class="dropdown-btn" onclick="toggleDropdown('${messageId}')">⋮</button>
                <div class="dropdown-menu" id="dropdown-${messageId}">
                    <button onclick="deleteMessage('${messageId}')">Delete</button>
                </div>
            `;
            if (imageBase64) {
                var img = document.createElement("img");
                img.src = `data:image/png;base64,${imageBase64}`;
                img.classList.add("chat-img");
                img.onclick = () => openImageModal(img);
                li.appendChild(img);
            }
            if (audioBase64) {
                var audio = document.createElement("audio");
                audio.controls = true;
                audio.src = `data:audio/webm;base64,${audioBase64}`;
                audio.classList.add("chat-audio");
                li.appendChild(audio);
            }
            document.getElementById("messageList").appendChild(li);
        });

        function deleteMessage(messageId) {
            connection.invoke("DeleteMessage", parseInt(messageId), parseInt(roomId));
        }

        connection.on("OnDeleteMessage", function (messageId) {
            document.getElementById(`msg-${messageId}`).remove();
        });

        function editMessage(messageId) {
            var messageItem = document.getElementById(`msg-${messageId}`);
            var oldContent = messageItem.querySelector('.message-text').innerText;

            document.getElementById('editedMessageInput').value = oldContent;
            document.getElementById('editedMessageId').value = messageId;

            document.getElementById('editMessageForm').style.display = "block";
            document.getElementById('sendMessageForm').style.display = "none";

        }

        connection.on("MessageEdited", function (messageId, newContent) {
            var messageItem = document.getElementById(`msg-${messageId}`);
            messageItem.querySelector('.message-text').innerText = newContent;
        });

        function closeImageModal() {
            document.getElementById("imageModal").style.display = "none";
        }

        function toggleDropdown(messageId) {
            var menu = document.getElementById(`dropdown-${messageId}`);
            menu.style.display = (menu.style.display === "block") ? "none" : "block";
        }

        function openImageModal(img) {
            var modal = document.getElementById("imageModal");
            var modalImg = document.getElementById("modalImage");
            modal.style.display = "block";
            modalImg.src = img.src;
        }
        
        window.onclick = function (event) {
            if (!event.target.matches('.dropdown-btn')) {
                document.querySelectorAll(".dropdown-menu").forEach(el => el.style.display = "none");
            }
        }
    </script>
}